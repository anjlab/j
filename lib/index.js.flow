// @flow

import _ from "lodash";
declare class Class0 {
  static $call(): string;
  static UTC(year: number, month: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): number;
  static now(): number;
  static parse(s: string): number;

  $key: $SymbolToPrimitive;
  $value: (hint: "string" | "default" | "number") => string | number;
  constructor(value?: number | string, month?: number, day?: number, hour?: number, minute?: number, second?: number, millisecond?: number): void;
  getDate(): number;
  getDay(): number;
  getFullYear(): number;
  getHours(): number;
  getMilliseconds(): number;
  getMinutes(): number;
  getMonth(): number;
  getSeconds(): number;
  getTime(): number;
  getTimezoneOffset(): number;
  getUTCDate(): number;
  getUTCDay(): number;
  getUTCFullYear(): number;
  getUTCHours(): number;
  getUTCMilliseconds(): number;
  getUTCMinutes(): number;
  getUTCMonth(): number;
  getUTCSeconds(): number;
  setDate(date: number): number;
  setFullYear(year: number, month?: number, date?: number): number;
  setHours(hours: number, min?: number, sec?: number, ms?: number): number;
  setMilliseconds(ms: number): number;
  setMinutes(min: number, sec?: number, ms?: number): number;
  setMonth(month: number, date?: number): number;
  setSeconds(sec: number, ms?: number): number;
  setTime(time: number): number;
  setUTCDate(date: number): number;
  setUTCFullYear(year: number, month?: number, date?: number): number;
  setUTCHours(hours: number, min?: number, sec?: number, ms?: number): number;
  setUTCMilliseconds(ms: number): number;
  setUTCMinutes(min: number, sec?: number, ms?: number): number;
  setUTCMonth(month: number, date?: number): number;
  setUTCSeconds(sec: number, ms?: number): number;
  toDateString(): string;
  toISOString(): string;
  toJSON(key?: any): string;
  toLocaleDateString(): string;
  toLocaleString(): string;
  toLocaleTimeString(): string;
  toTimeString(): string;
  toUTCString(): string;
  valueOf(): number;
}
declare export class JObj extends JRaw {

  _path: Array<string>;
  _v: {};
  get(path: string | Array<string> | null): JValue;
}
declare export class JRaw {

  _path: Array<string>;
  _v: any;
  constructor(v: any, path: Array<string>): void;
  isEmpty(): boolean;
  raw(): {};
}
declare export class JValue extends JRaw {

  _path: Array<string>;
  _v: any;
  array(): Array<any>;
  arrayOrNull(): ?Array<any>;
  bool(): boolean;
  boolOrNull(): ?boolean;
  date(): Class0;
  dateOrNull(): ?Class0;
  integer(): number;
  integerOrNull(): ?number;
  number(): number;
  numberOrNull(): ?number;
  obj(): JObj;
  objOrNull(): ?JObj;
  object(): {};
  objectOrNull(): ?{};
  string(): string;
  stringOrNull(): ?string;
  toBool(): boolean;
  toInteger(): number;
  toNumber(): number;
  toString(): string;
}
declare export default function(jsonLike: any, path?: string | Array<string> | null, parentPath?: Array<string>): JValue;

